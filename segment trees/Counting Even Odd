 #include<bits/stdc++.h>
using namespace std;
struct node
{
    long odd=0,even=0;
};
void creatsegtree(long  * arr,node  *tree,long  s,long  end,long  treenode)
{	

if(s==end)
{
	if(arr[s]%2==0)
        tree[treenode].even=1;
    else
        tree[treenode].odd=1;    
return;
}
	
	long mid=s +(end-s )/2;
	creatsegtree(arr,tree,s,mid,2*treenode);
	creatsegtree(arr,tree,mid+1,end,(2*treenode)+1);
	tree[treenode].even=tree[treenode*2].even+tree[1+(treenode*2)].even;
    tree[treenode].odd=tree[treenode*2].odd+tree[1+(treenode*2)].odd;
	return;
}
void update(long  *arr,node  *tree,long  s,long end,long  indx,long  val,long  treenode)
{
	if(s==end)
	{
        if(arr[indx]%2==0)
            tree[treenode].even--;
        else
            tree[treenode].odd--;
		arr[indx]=val;
		
        if(arr[indx]%2==0)
        tree[treenode].even=1;
    else
        tree[treenode].odd=1; 
		return;
	}
    
	long mid=s +(end-s )/2;
	if(indx>mid)
		update(arr,tree,mid+1,end,indx,val,2*treenode+1);		
	else
	update(arr,tree,s,mid,indx,val,2*treenode);
	
    tree[treenode].even=tree[treenode*2].even+tree[1+(treenode*2)].even;
    tree[treenode].odd=tree[treenode*2].odd+tree[1+(treenode*2)].odd;
	
	
}

long findeve(long left,long right,node *tree,long start,long end,long treenode)
{
	if(start>right || left >end)
	return 0;
	if(start>=left && end<=right)
	return tree[treenode].even;
    long mid=start +(end-start)/2;
		return findeve( left,right,tree,start,mid,2*treenode)+findeve( left,right,tree, mid+1, end,(2*treenode)+1);
	}

long findodd(long left,long right,node *tree,long start,long end,long treenode)
{
	if(start>right || left >end)
	return 0;
	if(start>=left && end<=right)
	return tree[treenode].odd;
    long mid=start +(end-start)/2;
		return findodd( left,right,tree,start,mid,2*treenode)+findodd( left,right,tree, mid+1, end,(2*treenode)+1);
	}


int main()
{
	long q,n;
    cin>>n;
    long *arr =new long[n];
    for(long i=0;i<n;i++)
        cin>>arr[i];
    
	node *tree=new node [4*n];
   
   
	creatsegtree(arr,tree,0,n-1,1);
    cin>>q;
    
	while(q--)
    {
        int a;
        cin>>a;
        if(a==0)
        {
            long x,y;
            cin>>x>>y;
           update(arr,tree,0,n-1,x-1,y,1);
                    }
        else if(a==1) {
            long l,r;
            cin>>l>>r;
           
          cout<<findeve(l-1,r-1,tree,0,n-1,1)<<endl;
        }
        else
        {
             long l,r;
            cin>>l>>r;
           
          cout<<findodd(l-1,r-1,tree,0,n-1,1)<<endl;
        }
        
    }
	
}
