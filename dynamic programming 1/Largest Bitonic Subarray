 	
int* lis(int* input, int n)
{
	int* output = new int[n];
	output[0] = 1;
	for (int i = 1; i < n; i++) 
    {
		output[i] = 1;
		for (int j = i - 1; j >= 0; j--) {
			if (input[j]<input[i]) {
				
			int possibleAns = output[j] + 1;
			if (possibleAns > output[i]) {
				output[i] = possibleAns;
			}
            }
		}
	}
	// int best = 0;
	// for (int i = 0; i < n; i++) {
	// 	if (best < output[i]) {
	// 		best = output[i];
	// 	}
	// }
    return output;
	
}


int *lds(int *input,int n)
{
    int *output=new int[n];
    output[n-1]=1;
    for(int i=n-2;i>=0;i--)
    {
        output[i]=1;
        for(int j=i+1;j<n;j++)
             {
			if (input[j] >=input[i]) {
				continue;
			}
			int possibleAns = output[j] + 1;
			if (possibleAns > output[i]) {
				output[i] = possibleAns;
			}
    }
        
}
    return output;
}
	int longestBitonicSubarray(int *input, int n) {
		
	/* Don't write main().
     	* the input is already passed as function argument.
     	* Taking input and printing output is handled automatically.
     	*/
     	// if(n<3)
     	// return n;
     	int *arr2=lis(input,n);
        int *arr1=lds(input,n);
//         for(int i=0;i<n;i++)
//             cout<<arr2[i]<<" ";
//         cout<<endl;
//          for(int i=0;i<n;i++)
//             cout<<arr1[i]<<" ";
//         cout<<endl;
        
           for(int i=0;i<n;i++)
           arr1[i]=arr1[i]+arr2[i];
     
        //  for(int i=0;i<n;i++)
        //     cout<<arr1[i]<<" ";
        // cout<<endl;
        
         
        int max=0;
        for(int i=0;i<n;i++)
        {
            if(max<arr1[i])
                max=arr1[i];
        }
   return max-1;
        
        
 	}

